print(t/ncol(df))
print(ncol(df)/t)
print(t/nrow(df))
t
print(t/nrow(df))
print(t/p)
#9
t = nrow(df[df$Cuir=="oui",])
p =  nrow(df[df$HiFi == "oui",])
print(t/p)
#9
cuir = nrow(df[df$Cuir=="oui",])
hifi =  nrow(df[df$HiFi == "oui",])
print(cuir/hifi)
hifi
print(prop.table(table(df$Cuir,df$HiFi),1)["oui","oui"])
print(hifi/cuir)
#10
print(tapply(df$Prix,df$Type,mean))
#11
print(tapply(df$Prix,df$Type,mean), decreasing=TRUE)
#11
print(tapply(sort(df$Prix,df$Type,mean), decreasing=TRUE))
#11
print(sort(tapply(df$Prix,df$Type,mean), decreasing=TRUE))
#12
print(tapply(df$Prix,df[df$Cuir=="oui"&df$HiFi=="oui",],mean))
#12
print(tapply(df$Prix,df[df$Cuir=="oui"&df$HiFi=="oui",c("Prix")],mean))
#12
print(tapply(df$Prix,INDEX = list(df$Cuir,df$HiFi),mean))
x=data(mtacrs)
x=data(mtcqrs)
x=data(,tcqrs)
x=data(mtcars)
x
head(mtcars)
class(mtcars)
quantil(mtcars$mpg)
quantile(mtcars$mpg)
quantile(mtcars$mpg, 75)
quantile(mtcars$mpg)$75%
class(quantile(mtcars$mpg))
quantile(mtcars$mpg)[3]
quantile(mtcars$mpg)[4]
}
intervalle_interquartile = function(x){
if (is.numeric(x) =! TRUE){
source("~/M2/R/seance_4/ex2.R")
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
print(NA)
break
}
return(quantile(x)[4]-quantile(x)[2])
}
sapply(mtcars,intervalle_interquartile)
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
return(NA)
}
return(quantile(x)[4]-quantile(x)[2])
}
sapply(mtcars,intervalle_interquartile)
intervalle_interquartile = function(x){
if (is.numeric(x) != TRUE){
return(NA)
}
return(quantile(x)[[4]]-quantile(x)[[2]])
}
sapply(mtcars,intervalle_interquartile)
sapply(iris,intervalle_interquartile)
iris
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t")
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", header=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", h=T, sep="\t",)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt",  sep="\t",h=T)
df_auto
centre_reduire = function(x){
x-mean(x)/sd(x)
}
centre_reduire = function(x){
x-mean(x)/sd(x)
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire())
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
centre_reduire = function(x){
return(x-mean(x)/sd(x))
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire())
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
liste = lapply(df,centre_reduire)
centre_reduire = function(x){
return(x-mean(x)/sd(x))
}
df_centre_reduire = function(df){
liste = lapply(df,centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
df_num = lapply(df,class="integer")
df_num = lapply(df_auto,class="integer")
df_num = lapply(df_auto,class)=="integer"
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num,centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_centre_reduire(df_auto)
test = lapply(df_auto, class)=="integer"
test
df_auto[,test]
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num[,df_num],centre_reduire)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df_num[,df_num],centre_reduire)
return(df)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_CR=df_centre_reduire(df_auto)
centre_reduire = function(x){
x = (x-mean(x))/(sd(x))
return(x)
}
df_centre_reduire = function(df){
df_num = lapply(df,class)=="integer"
df[,df_num] = lapply(df[,df_num],centre_reduire)
return(df)
}
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T)
df_auto
df_CR=df_centre_reduire(df_auto)
df_CR
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T)
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos.txt", sep="\t", h=T,row.names=1,dec=".")
df_auto
df_CR=df_centre_reduire(df_auto)
df_CR
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,row.names=1,dec=".")
df_auto
print(lapply(df_auto,is.na))
df_auto
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,row.names=1,dec=".", na.strings="?")
df_auto
print(lapply(df_auto,is.na))
print(lapply(df_auto,is.na)==T)
print(lapply(df_auto,is.na)==T)
print(lapply(dfna.omit)
print(lapply(dfna.omit))
print(lapply(df,na.omit))
print(df[lapply(df_auto,is.na),])
print(df[lapply(df_auto,is.na)==T,])
print(df[lapply(df_auto,is.na)=="T",])
print(df[lapply(df_auto,is.na)=="TRUE",])
print(lapply(df,length)))
function (object, ...)
print(length(lapply(df,na.omit)))
print(lapply(df,length))
print(class(lapply(df,na.omit)))
print(length(lapply(df,na.omit)))
print(length(lapply(df,na.omit))[[1]])
print((lapply(df,na.omit))[[1]])
sum(is.na(df_auto))
print((lapply(df,na.omit)))
print(lapply(df_auto,is.na))
print(class(lapply(df_auto,is.na)))
print(lapply(df_auto,is.na)[1])
sum(is.na(df_auto))
is.na(df_auto)
is.na(df_auto$CYL)
df_auto$CYL[,is.na(df_auto$CYL)]
df_auto$CYL[is.na(df_auto$CYL)]
x=df_auto$CYL
x
x[is.na(x)] = mean(x)
x
getmod=function(v){
uniqv=unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
getmod=function(v){
uniqv=unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
getmod=function(v){
uniqv<-unique(v)
uniqv(which.max(tabulate(match(v,uniqv))))
}
df_no_missing = df_val_missing(df_auto)
x
df_auto
x=df_auto$FINITION
x
unique(x)
which.max(tabulate(match(v,unique(x))))
which.max(tabulate(match(x,unique(x))))
match(x,unique(x))
tabulate(match(x,unique(x)))
un=unique(x)
tabulate(match(x,un)
)
which.max(tabulate(match(x,un)))
un(which.max(tabulate(match(x,un))))
getmod=function(v){
uniqv=unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
x=replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
x=replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
is.numeric(df_auto$PRIX)==T
is.numeric(df_auto$PRIX)
df_auto = read.table("C:/Users/pauli/Documents/M2/R/seance_4/Seance_4_Data/autos_md.txt", sep="\t", h=T,dec=".", na.strings="?")
df_auto
is.numeric(df_auto$FINITION)
getmod=function(v){
uniqv=unique(v)
uniqv[which.max(tabulate(match(v,uniqv)))]
}
val_missing=function(x){
#si ya des na
if(sum(is.na(x))>0){
#si c'est num
if(is.numeric(x)==T){
x=replace(x, is.na(x)==T, mean(na.omit(x)))
return(x)
}else {
print("pas num")
x=replace(x, is.na(x)==T, getmod(na.omit(x)))
return(x)
}
}
else{
return(x)
}
}
df_val_missing=function(df){
df = lapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
df_val_missing=function(df){
df = sapply(df,val_missing)
return(df)
}
df_no_missing = df_val_missing(df_auto)
df_no_missing
untar("Téléchargements/pls_2.8-1.tar.gz", list=T)
untar("C:/Users/pauli/Downloads/pls_2.8-1.tar.gz", list=T)
getwd()
untar("C:/Users/pauli/Downloads/pls_2.8-1.tar.gz")
untar("C:/Users/pauli/Downloads/mixOmics_6.22.0.tar")
untar("C:/Users/pauli/Downloads/mixOmics_6.22.0.tar.gz")
getdir
getdir()
ls
dir
getdir
getwd
data(nutrimouse)
data
data<-read_excel("seeds_dataset.xls")
setwd("C:/Users/pauli/Documents/M2/R/projet/code/PLSDA_R_Package/")
source("code/nipals.r")
source("code/scale.r")
source("code/predict.r")
fit <- function(formula, data,
ncomp = 2,
max.iter = 100,
tol = 1e-06)
{
#formula au bon type
if(plyr::is.formula(formula)==F){
stop("formula must be R formula !")
}
if (any(colSums(!is.na(data)) == 0) | any(rowSums(!is.na(data)) == 0 )){
stop("some rows or columns are entirely missing. ",
"Remove those before running pca.", call. = FALSE)
}
#Récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
y <- as.factor(model.response(model.frame(formula, data = data)))
#si data est a standardiser
if ((mean(apply(X,2,mean))>abs(1)) || (sum(sqrt(apply(X,2,var))) != ncol(X))){
X <- plsda.scale(X)
}
ydum <- plsda.dummies(y)
nipals.res <- plsda.nipals(X=X, y=ydum, ncomp = ncomp , max.iter = max.iter, tol = tol)
###faire les plots ici
return(nipals.res)
}
data<-read_excel("seeds_dataset.xls")
data
library(ggplot2)
ggplot(data, aes(x = area , y = parameter , color = seed)) +
geom_point()
ggplot(data, aes(factor(area), fill = factor(parameter))) +
geom_bar(position = "dodge2")
ggplot(data, aes(factor(area), fill = factor(parameter))) +
geom_bar(position = "dodge2")
ggplot(data, aes(factor(area), fill = factor(parameter))) +
geom_bar(position = "dodge2")
ggplot(data, aes(area, fill = parameter)) +
geom_bar(position = "dodge2")
ggplot(data, aes(area, fill = seed)) +
geom_bar(position = "dodge2")
ggplot(data, aes(parameter, fill = seed)) +
geom_bar(position = "dodge2")
ggplot(data, aes(area,parameter , fill = seed)) +
geom_bar(position = "dodge2")
ggplot(data, aes(parameter , fill = seed)) +
geom_bar(position = "dodge2")
test = fit(seed ~., data)
test$Coeffs
pouette = plsda.predict(test, X)
class(pouette)
#Récupération des X et Y
X <- as.matrix(model.matrix(formula, data = data)[,-1])
X <- as.matrix(model.matrix(seed~., data = data)[,-1])
pouette = plsda.predict(test, X)
class(pouette)
class(test)
pouette
object<-test
if (class(ObjectPLSDA)!="PLSDA") {
stop("Object's class is not PLSDA")
}
if (class(object)!="PLSDA") {
stop("Object's class is not PLSDA")
}
if (ncol(X) != (nrow(object$Coeffs)-1)) {
stop("X must have the same number of columns than model")
}
# Setting data
coeffs <- object$Coeffs
X <- as.matrix(X)
B <- coeffs[-1,]
B
Cte <- matrix(rep(coeffs[1,], each=nrow(X)), nrow(X), ncol(B))
Cte
# Prediction
Y.hat <- X %*% B + Cte
Y.hat
B
pouette
test
ggplot(test, aes(x = R2)) +
geom_point()
test$Xloading.weights
test$Xloading
test$Xloadings
Y
y
formula=seed~.
y <- as.factor(model.response(model.frame(formula, data = data)))
y
rescol<-cbind(test$Xloadings,y)
rescol
rescol<-cbind(test$Xloadings,as.data.frame(y))
rescol
ggplot(rescol, aes(x=X1, y=X2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
data(iris)
iris
test = fit(Species ~., iris)
test$Coeffs
X <- as.matrix(model.matrix(seed~., data = iris)[,-1])
X <- as.matrix(model.matrix(Spices~., data = iris)[,-1])
X <- as.matrix(model.matrix(Species~., data = iris)[,-1])
pouette = plsda.predict(test, X)
y <- as.factor(model.response(model.frame(Species, data = iris)))
y <- as.factor(model.response(model.frame(Species~., data = iris)))
rescol<-cbind(test$Xloadings,as.data.frame(y))
ggplot(rescol, aes(x=X1, y=X2, col = y, fill = y)) +
stat_ellipse(geom = "polygon", col= "black", alpha =0.5)+
geom_point(shape=21, col="black")
ggplot() +  geom_text(rescol, aes(x = X1, y = X2, label = rownames(y)), col = 'red') +
geom_segment(rescol, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),
alpha = 0.75, color = 'darkred')
test$Xloading.weights
y
x
X
test$Xloading.weights
ggplot() +  geom_text(test$Xloading.weights, aes(x = X1, y = X2, label = rownames(test$Xloading.weights)), col = 'red') +
geom_segment(test$Xloading.weights, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),
alpha = 0.75, color = 'darkred')
rownames(test$Xloading.weights)
pouette <- test$Xloading.weights
ggplot() +  geom_text(pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),
alpha = 0.75, color = 'darkred')
ggplot() +  geom_text(pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
pouette
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
data<-read_excel("seeds_dataset.xls")
formula <- seed~.
test = fit(formula, data)
test$Coeffs
X <- as.matrix(model.matrix(formula, data = iris)[,-1])
pouette = plsda.predict(test, X)
X <- as.matrix(model.matrix(formula, data = data)[,-1])
pouette = plsda.predict(test, X)
y <- as.factor(model.response(model.frame(formula, data = data)))
rescol<-cbind(test$Xloadings,as.data.frame(y))
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
pouette
proute = plsda.predict(test, X)
proute
rescol
test
pouette = test$R2
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
pouette
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
class(pouette)
pouette = as.data.frame(test$R2)
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
pouette
pouette = as.data.frame(test$Xloading.weights)
ggplot() +
geom_text(data=pouette, aes(x = X1, y = X2, label = rownames(pouette)), col = 'red') +
geom_segment(data=pouette, aes(x = 0, y = 0, xend = X1, yend = X2), arrow=arrow(length=unit(0.2,"cm")),alpha = 0.75, color = 'darkred')
