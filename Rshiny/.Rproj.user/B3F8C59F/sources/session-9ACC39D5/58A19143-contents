setwd('/home/pierre/Téléchargements/plsda/R')
source('./plsda_dummies.R')
source('./plsda_fit.R')
source('./plsda_predict.R')
source('./plsda_pls.R')
source('./plsda_scale.R')

df <-as.data.frame(matrix(rnorm(10),nrow=1000, ncol=150))




plsda.cv<-function(formula,data,nfold=10){
  
  #Vérification que l'entrée est bien une formule Y~X
  if(plyr::is.formula(formula)==F){
    stop("formula must be R formula !")
  }
  
  #Récupération des X et Y
  X <- model.matrix(formula, data = data)
  X <- X[,-1] #suppression de l'intercept
  Y <- model.response(model.frame(formula, data = data))
  
  ncomp <- qr(X)$rank
  PRESS <- NULL
  for(j in 1:ncomp){
    
    press <- NULL
    
    s<-sample(1:nrow(X),nrow(X))
    ns<-trunc(nrow(X)/nfold)
    newX <- X[s,]
    newY <- Y[s]
    
    for(i in 1:nfold){
      #index du ième échantillon
      idx<-c((1+(i-1)*ns):(ns*(i)))
      
      #on divise les données test et entraînement
      
      X.train <- newX[-idx,]
      X.test <- newX[idx,]
      Y.train <- newY[-idx]
      Y.test <- plsda.dummies(newY)
      Y.test <- Y.test[idx,]
      train <- data.frame("Y"=Y.train, X.train)
      
      #on exécute le modèle sur les données d'appprentissage
      fit<-plsda.fit(Y~., train, ncomp = j)
      #on fait la prédiction sur X.test
      pred <- plsda.predict(fit, X.test, type ="posterior")
      
      #on calcule le press pour le ième échantillon
      press[i] <- sum((Y.test-pred)^2)
      
    }
    PRESS[j] <-as.numeric(sum(press))
  }
  
  ncomp <- which.min(PRESS)
  min.PRESS <- PRESS[ncomp]
  object=list("ncomp" = ncomp,
              "PRESS" = PRESS,
              "min.PRESS" = min.PRESS)
  
  class(object)<-"CV"
  return(object)
}


system.time(plsda.cv(V1~.,df,nfold=10))
